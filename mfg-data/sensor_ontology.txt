CREATE (:Sensor_Value {value_type: "integer", description: "The analog output signal of the potentiometer on the Robot 2 gripper ", item_name: "I_R02_Gripper_Pot"})<-[:has_value]-(:Sensor {item_spec: "Sensata-BEI", item_name: "Potentiometer 2", measures: "Linear measurement of how far the gripper is opened or closed"})<-[:has_sensor]-(`Gripper 2`:Gripper {item_name: "Gripper 2", item_spec: "3D Printed", function: "Tension grips the two body parts "})<-[:has]-(`Robot 2`:Robot {item_spec: "Yaskawa six-axis GP8", item_name: "Robot 2", function: "Takes two body parts of the rocket and stores it in its assembly plate then hands them to R03"})<-[:employs]-(Assembly_line:Assembly_line {name: "Assembly Line"})-[:employs]->(`Robot 1`:Robot {item_spec: "Yaskawa six-axis HC10", function: "Transport disassembled rocket tray from MHS to Conveyor 1", item_name: "Robot 1"})-[:has]->(`Gripper 1`:Gripper {item_name: "Gripper 1", function: "Picks up the tray", item_spec: "3D Printed"})-[:has_sensor]->(:Sensor {item_spec: "Sensata-BEI", item_name: "Potentiometer 1", measures: "Linear measurement of how far the gripper is opened or closed"})-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The analog output signal of the potentiometer on the Robot 1 gripper ", item_name: "I_R01_Gripper_Pot"}),
(`Gripper 1`)-[:has_sensor]->(:Sensor {item_spec: "TE Connectivity", item_name: "Load cell 1", measures: "Pressure applied on the inside of the gripper"})-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The analog output signal of the load cell on the Robot 1 gripper ", item_name: "I_R01_Gripper_Load"}),
(:Sensor_Value {value_type: "integer", description: "The analog output signal of the potentiometer on the Robot 4 gripper ", item_name: "I_R04_Gripper_Pot"})<-[:has_value]-(:Sensor {item_spec: "Sensata-BEI", name: "Potentiometer 4", measures: "Linear measurement of how far the gripper is opened or closed"})<-[:has_sensor]-(`Gripper 4`:Gripper {item_name: "Gripper 4", function: "Grips the rocket body parts"})<-[:has]-(`Robot 4`:Robot {item_spec: "Yaskawa six-axis HC10", item_name: "Robot 4", function: "Disassembles rocket"})<-[:employs]-(Assembly_line)-[:employs]->(`Robot 3`:Robot {item_spec: "Yaskawa six-axis GP8", item_name: "Robot 3", function: "Assembles all four rocket parts"})-[:has]->(`Gripper 3`:Gripper {item_name: "Gripper 3", function: "Grips the rocket body parts"})-[:has_sensor]->(:Sensor {item_spec: "Sensata-BEI", item_name: "Potentiometer 3", measures: "Linear measurement of how far the gripper is opened or closed"})-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The analog output signal of the potentiometer on the Robot 3 gripper ", item_name: "I_R03_Gripper_Pot"}),
(:Sensor_Value {value_type: "string", description: "Path to image taken from Camera 1", item_name: "path 1"})<-[:has_value]-(Camera:Sensor {item_name: "Camera", function: "Captures live footage of assembly process", measures: "Images"})<-[:has]-(Assembly_line)-[:runs]->(`Conveyor Belt 1`:Conveyor {name: "Conveyor Belt 1"})<-[:controls]-(`VFD 1`:Controller {item_name: "VFD 1", function: "Controls the operation of conveyor belts"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The temperature of conveyor 1 in Fahrenheit", item_name: "Q_VFD1_Temperature"}),
(`Gripper 2`)-[:has_sensor]->(:Sensor {item_spec: "TE Connectivity", item_name: "Load cell 2", measures: "Pressure applied on the inside of the gripper"})-[:has_value]->(`I_R02_Gripper_Load`:Sensor_Value {value_type: "integer", description: "The analog output signal of the load cell on the Robot 2 gripper ", item_name: "I_R02_Gripper_Load"})-[:_RELATED]->(`I_R02_Gripper_Load`),
(:Sensor_Value {value_type: "float", description: "The joint T angle of Robot 1 in degrees", item_name: "M_R01_TJointAngle_Degree"})<-[:has_value]-(:Sensor {item_name: "Encoder_R01_T", measures: "Angle of Joint T"})<-[:has_sensor]-(`Robot 1`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R01_S", measures: "Angle of Joint S"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint S angle of Robot 1 in degrees", item_name: "M_R01_SJointAngle_Degree"}),
(`Gripper 3`)-[:has_sensor]->(:Sensor {item_spec: "TE Connectivity", item_name: "Load cell 3", measures: "Pressure applied on the inside of the gripper"})-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The analog output signal of the load cell on the Robot 3 gripper ", item_name: "I_R03_Gripper_Load"}),
(:Sensor_Value {value_type: "float", description: "The temperature of conveyor 3 in Fahrenheit", item_name: "Q_VFD3_Temperature"})<-[:has_value]-(`VFD 3`:Controller {item_name: "VFD 3", fuction: "Controls the operation of conveyor belts"})-[:controls]->(`Conveyor Belt 3`:Conveyor {item_name: "Conveyor Belt 3", item_spec: "Robounits C4N ", function: "Material transport along assembly line"})<-[:has]-(Assembly_line)-[:has]->(`Conveyor Belt 2`:Conveyor {item_name: "Conveyor Belt 2", item_spec: "Robounits C4N ", function: "Material transport along assembly line"})<-[:controls]-(`VFD 2`:Controller {item_name: "VFD 2", function: "Controls the operation of conveyor belts"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The temperature of conveyor 2 in Fahrenheit", item_name: "Q_VFD2_Temperature"}),
(:Sensor_Value {value_type: "bool", description: "True if the Green Rocket Tray is detected in the Material Handling Station and False if otherwise", item_name: "I_MHS_GreenRocketTray"})<-[:has_value]-(:Sensor {item_name: "ProximitySensor", function: "Determines whether a tray is present to be taken to conveyor 1"})<-[:has_sensor]-(:Station {item_name: "Material Handling Station", function: "Holds the input material to assembly  process"})<-[:has]-(Assembly_line)-[:has]->(`Conveyor Belt 4`:Conveyor {item_name: "Conveyor Belt 4", item_spec: "Robounits C4N ", function: "Material transport along assembly line"})<-[:controls]-(`VFD 4`:Controller {item_name: "VFD 4", function: "Controls the operation of conveyor belts"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The temperature of conveyor 4 in Fahrenheit", item_name: "Q_VFD4_Temperature"}),
(`Gripper 4`)-[:has_sensor]->(:Sensor {item_spec: "TE Connectivity", item_name: "Load Cell 4", measures: "Pressure applied on the inside of the gripper"})-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The analog output signal of the load cell on the Robot 4 gripper ", item_name: "I_R04_Gripper_Load"}),
(Camera)-[:has_value]->(:Sensor_Value {value_type: "string", description: "Path to image taken from Camera 2", item_name: "path 2"}),
(`Proximity Sensor 2`:Sensor {item_name: "ProximitySensor_Conv2", item_spec: "Keyence", function: "Alerts PLC when object is at Stop 2for R03 to pick up object", measures: "Presence of object at Station 2"})<-[:has_sensor]-(`Conveyor Belt 2`)-[:has_sensor]->(:Sensor {item_name: "ProximitySensor_Conv2", item_spec: "Keyence", function: "Alerts PLC when object is at Stop 1 for R02 to pick up object", measures: "Presence of object at Station 1"})-[:has_value]->(:Sensor_Value {value_type: "bool", description: "True if object is present at station, False otherwise", item_name: "I_Stopper1_Status"}),
(`Conveyor Belt 4`)-[:has_sensor]->(:Sensor {item_name: "ProximitySensor_Conv4", item_spec: "Keyence", measures: "Presence of object at Station 4", function: "Alerts PLC when object is at Stop 4 f"})-[:has_value]->(:Sensor_Value {value_type: "bool", description: "True if object is present at station, False otherwise", item_name: "I_Stopper4_Status"}),
(Assembly_line)-[:uses]->(:Controller {item_name: "Programmable Logic Controller", function: "Controls the logic sequence of the assembly process", item_spec: "Siemens S7-1500"})-[:has_value]->(:Sensor_Value {item_name: "Q_Cell_CycleCount", description: "Integer value representing the number of cycles elapsed", value_type: "integer", min_value: "", max_value: "", unit: ""}),
(:Sensor_Value {value_type: "float", description: "The jointU angle of Robot 1 in degrees", item_name: "M_R01_UJointAngle_Degree"})<-[:has_value]-(:Sensor {item_name: "Encoder_R01_U", measures: "Angle of Joint U"})<-[:has_sensor]-(`Robot 1`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R01_L", measures: "Angle of Joint L"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint L angle of Robot 1 in degrees", item_name: "M_R01_LJointAngle_Degree"}),
(:Sensor_Value {value_type: "float", description: "The joint R angle of Robot 1 in degrees", item_name: "M_R01_RJointAngle_Degree"})<-[:has_value]-(:Sensor {item_name: "Encoder_R01_R", measures: "Angle of Joint R"})<-[:has_sensor]-(`Robot 1`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R01_B", measures: "Angle of Joint B"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint B angle of Robot 1 in degrees", item_name: "M_R01_BJointAngle_Degree"}),
(n117:Sensor {item_name: "Encoder_R02_L", measures: "Angle of Joint L"})<-[:has_sensor]-(`Robot 2`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R02_S", measures: "Angle of Joint S"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint S angle of Robot 2 in degrees", item_name: "M_R02_SJointAngle_Degree"}),
(`Robot 2`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R02_T", measures: "Angle of Joint T"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint T angle of Robot 2 in degrees", item_name: "M_R02_TJointAngle_Degree"}),
(n117)-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint L angle of Robot 2 in degrees", item_name: "M_R02_LJointAngle_Degree"}),
(n121:Sensor {item_name: "Encoder_R02_B", measures: "Angle of Joint B"})<-[:has_sensor]-(`Robot 2`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R02_U", measures: "Angle of Joint U"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The jointU angle of Robot 2 in degrees", item_name: "M_R02_UJointAngle_Degree"}),
(n121)-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint B angle of Robot 2 in degrees", item_name: "M_R02_BJointAngle_Degree"}),
(`Robot 2`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R02_R", measures: "Angle of Joint R"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint R angle of Robot 2 in degrees", item_name: "M_R02_RJointAngle_Degree"}),
(n129:Sensor {item_name: "Encoder_R03_L", measures: "Angle of Joint L"})<-[:has_sensor]-(`Robot 3`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R03_S", measures: "Angle of Joint S"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint S angle of Robot 3 in degrees", item_name: "M_R03_SJointAngle_Degree"}),
(`Robot 3`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R03_T", measures: "Angle of Joint T"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint T angle of Robot 3 in degrees", item_name: "M_R03_TJointAngle_Degree"}),
(n129)-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint L angle of Robot 3 in degrees", item_name: "M_R03_LJointAngle_Degree"}),
(n133:Sensor {item_name: "Encoder_R03_B", measures: "Angle of Joint B"})<-[:has_sensor]-(`Robot 3`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R03_U", measures: "Angle of Joint U"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint U angle of Robot 3 in degrees", item_name: "M_R03_UJointAngle_Degree"}),
(n133)-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint B angle of Robot 3 in degrees", item_name: "M_R03_BJointAngle_Degree"}),
(`Robot 3`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R03_R", measures: "Angle of Joint R"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint R angle of Robot 3 in degrees", item_name: "M_R03_RJointAngle_Degree"}),
(n141:Sensor {item_name: "Encoder_R04_L", measures: "Angle of Joint L"})<-[:has_sensor]-(`Robot 4`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R04_S", measures: "Angle of Joint S"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint S angle of Robot 4 in degrees", item_name: "M_R04_SJointAngle_Degree"}),
(`Robot 4`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R04_T", measures: "Angle of Joint T"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint T angle of Robot 4 in degrees", item_name: "M_R04_TJointAngle_Degree"}),
(n141)-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint L angle of Robot 3 in degrees", item_name: "M_R03_LJointAngle_Degree"}),
(n145:Sensor {item_name: "Encoder_R04_B", measures: "Angle of Joint B"})<-[:has_sensor]-(`Robot 4`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R04_U", measures: "Angle of Joint U"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint U angle of Robot 4 in degrees", item_name: "M_R04_UJointAngle_Degree"}),
(n145)-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint B angle of Robot 4 in degrees", item_name: "M_R04_BJointAngle_Degree"}),
(`Robot 4`)-[:has_sensor]->(:Sensor {item_name: "Encoder_R04_R", measures: "Angle of Joint R"})-[:has_value]->(:Sensor_Value {value_type: "float", description: "The joint R angle of Robot 4 in degrees", item_name: "M_R04_RJointAngle_Degree"}),
(`VFD 4`)-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The speed of the conveyor 4 in mm/s", item_name: "M_Conv4_Speed_mmps"}),
(`VFD 3`)-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The speed of the conveyor 3 in mm/s", item_name: "M_Conv3_Speed_mmps"}),
(`Conveyor Belt 3`)-[:has_sensor]->(:Sensor {item_name: "ProximitySensor_Conv3", item_spec: "Keyence", measures: "Presence of object at Station 5", function: "Alerts PLC when object is at Stop 5 for R04 to pick up object"})-[:has_value]->(:Sensor_Value {value_type: "bool", description: "True if object is present at station, False otherwise", item_name: "I_Stopper5_Status"}),
(`VFD 2`)-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The speed of the conveyor 2 in mm/s", item_name: "M_Conv2_Speed_mmps"}),
(`Proximity Sensor 2`)-[:has_value]->(:Sensor_Value {value_type: "bool", description: "True if object is present at station, False otherwise", item_name: "I_Stopper1_Status"}),
(`VFD 1`)-[:has_value]->(:Sensor_Value {value_type: "integer", description: "The speed of the conveyor 1 in mm/s", item_name: "M_Conv1_Speed_mmps"}),
(`Conveyor Belt 1`)-[:has_sensor]->(:Sensor {item_name: "ProximitySensor_Conv3", item_spec: "Keyence", function: "Alerts PLC when object is at Stop 3", measures: "Presence of object at Station 3"})-[:has_value]->(:Sensor_Value {value_type: "bool", description: "True if object is present at station, False otherwise", item_name: "I_Stopper1_Status"})